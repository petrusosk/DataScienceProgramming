{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "# essential python libraries\n",
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "# preprocessing \n",
    "from preprocessing import create_column_filter, apply_column_filter\n",
    "from preprocessing import create_imputation, apply_imputation\n",
    "from preprocessing import create_normalization, apply_normalization\n",
    "from preprocessing import accuracy, auc, brier_score, split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sklearn models\n",
    "import os\n",
    "import time\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.ensemble import VotingClassifier\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
    "from sklearn.metrics import recall_score, precision_score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data loading"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "training = pd.read_csv(\"training_df.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "# drop unwanted columns\n",
    "training = training.drop(columns = 'Unnamed: 0', axis = 1)\n",
    "training = training.drop(columns = 'SMILES', axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "# rename ACTIVE to CLASS, so we can use our preprocessing functions\n",
    "training = training.rename(columns={\"INDEX\": \"ID\"})\n",
    "training = training.rename(columns={\"Active\": \"CLASS\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>nrAtoms</th>\n",
       "      <th>ExactMolWT</th>\n",
       "      <th>Fragments</th>\n",
       "      <th>Lipinski</th>\n",
       "      <th>CLASS</th>\n",
       "      <th>fp_0</th>\n",
       "      <th>fp_1</th>\n",
       "      <th>fp_2</th>\n",
       "      <th>fp_3</th>\n",
       "      <th>...</th>\n",
       "      <th>fp_114</th>\n",
       "      <th>fp_115</th>\n",
       "      <th>fp_116</th>\n",
       "      <th>fp_117</th>\n",
       "      <th>fp_118</th>\n",
       "      <th>fp_119</th>\n",
       "      <th>fp_120</th>\n",
       "      <th>fp_121</th>\n",
       "      <th>fp_122</th>\n",
       "      <th>fp_123</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>245.105193</td>\n",
       "      <td>0.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>376.082599</td>\n",
       "      <td>0.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>382.040562</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>427.052418</td>\n",
       "      <td>0.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>329.148789</td>\n",
       "      <td>0.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>121369</th>\n",
       "      <td>121370.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>354.082032</td>\n",
       "      <td>0.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>121370</th>\n",
       "      <td>121371.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>246.136828</td>\n",
       "      <td>0.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>121371</th>\n",
       "      <td>121372.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>405.088019</td>\n",
       "      <td>0.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>121372</th>\n",
       "      <td>121373.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>361.076179</td>\n",
       "      <td>0.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>121373</th>\n",
       "      <td>121374.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>485.234828</td>\n",
       "      <td>0.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>121374 rows × 130 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              ID  nrAtoms  ExactMolWT  Fragments  Lipinski  CLASS  fp_0  fp_1  \\\n",
       "0            1.0     18.0  245.105193        0.0      18.0    0.0   0.0   0.0   \n",
       "1            2.0     26.0  376.082599        0.0      26.0    0.0   0.0   0.0   \n",
       "2            3.0     25.0  382.040562        0.0      25.0    0.0   0.0   0.0   \n",
       "3            4.0     27.0  427.052418        0.0      27.0    0.0   0.0   0.0   \n",
       "4            5.0     24.0  329.148789        0.0      24.0    0.0   0.0   0.0   \n",
       "...          ...      ...         ...        ...       ...    ...   ...   ...   \n",
       "121369  121370.0     23.0  354.082032        0.0      23.0    0.0   0.0   0.0   \n",
       "121370  121371.0     18.0  246.136828        0.0      18.0    0.0   0.0   0.0   \n",
       "121371  121372.0     29.0  405.088019        0.0      29.0    0.0   0.0   0.0   \n",
       "121372  121373.0     26.0  361.076179        0.0      26.0    0.0   0.0   0.0   \n",
       "121373  121374.0     34.0  485.234828        0.0      34.0    0.0   0.0   1.0   \n",
       "\n",
       "        fp_2  fp_3  ...  fp_114  fp_115  fp_116  fp_117  fp_118  fp_119  \\\n",
       "0        0.0   0.0  ...     0.0     0.0     0.0     0.0     0.0     0.0   \n",
       "1        1.0   1.0  ...     1.0     0.0     1.0     0.0     1.0     0.0   \n",
       "2        0.0   0.0  ...     1.0     0.0     0.0     0.0     0.0     1.0   \n",
       "3        1.0   0.0  ...     0.0     0.0     0.0     0.0     0.0     0.0   \n",
       "4        1.0   1.0  ...     1.0     0.0     1.0     0.0     0.0     0.0   \n",
       "...      ...   ...  ...     ...     ...     ...     ...     ...     ...   \n",
       "121369   1.0   0.0  ...     0.0     0.0     0.0     0.0     0.0     1.0   \n",
       "121370   0.0   1.0  ...     0.0     1.0     1.0     0.0     0.0     0.0   \n",
       "121371   0.0   0.0  ...     0.0     0.0     0.0     0.0     0.0     0.0   \n",
       "121372   0.0   0.0  ...     1.0     0.0     0.0     0.0     0.0     0.0   \n",
       "121373   0.0   0.0  ...     0.0     0.0     0.0     0.0     1.0     0.0   \n",
       "\n",
       "        fp_120  fp_121  fp_122  fp_123  \n",
       "0          0.0     0.0     1.0     0.0  \n",
       "1          0.0     0.0     1.0     0.0  \n",
       "2          1.0     0.0     1.0     0.0  \n",
       "3          0.0     1.0     1.0     0.0  \n",
       "4          0.0     1.0     1.0     0.0  \n",
       "...        ...     ...     ...     ...  \n",
       "121369     0.0     0.0     1.0     0.0  \n",
       "121370     1.0     0.0     1.0     0.0  \n",
       "121371     1.0     1.0     1.0     0.0  \n",
       "121372     0.0     0.0     1.0     0.0  \n",
       "121373     0.0     0.0     1.0     0.0  \n",
       "\n",
       "[121374 rows x 130 columns]"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "training"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Train and validation split"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data preparation needs to be done only on the training set (so after splitting has been done). The preprocessing will in this way be fitted to the training set and then be applied onto both the training and test set. A 80/20% split is choosen for the train and test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "train_df, val_df = train_test_split(training, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Handling imbalanced data set "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "def under_sample(train_df):\n",
    "    false_sample = train_df[train_df[\"CLASS\"] == 1]\n",
    "    true_sample = train_df[train_df[\"CLASS\"] == 0].sample(n=false_sample.shape[0])\n",
    "    return pd.concat([false_sample, true_sample]).sample(frac=1).reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "def over_sample(train_df):\n",
    "    false_sample = train_df[train_df[\"CLASS\"] == 0]\n",
    "    true_sample = train_df[train_df[\"CLASS\"] == 1].sample(n=false_sample.shape[0], replace=True)\n",
    "    return pd.concat([false_sample, true_sample]).sample(frac=1).reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_df = under_sample(train_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Further split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = train_df.copy().drop(columns = 'CLASS')\n",
    "y_train = train_df['CLASS']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test = val_df.copy().drop(columns = 'CLASS')\n",
    "y_test = val_df['CLASS']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0    9589\n",
       "0.0    9589\n",
       "Name: CLASS, dtype: int64"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Preprocessing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Preprocessing is being fit to the training data set and then applied on both train and validation set."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Check for missing data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Series([], dtype: float64)"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Find columns with null values \n",
    "null_columns = training.columns[training.isnull().any()]\n",
    "training[null_columns].isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Outliers detection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precentage 1 stds away: 18\n",
      "Precentage 2 stds away: 9\n",
      "Precentage 3 stds away: 9\n"
     ]
    }
   ],
   "source": [
    "# import to detect outliers\n",
    "from scipy import stats\n",
    "\n",
    "# Get Z-value \n",
    "z_df = X_train.copy().drop(columns = ['ID'], axis = 1)\n",
    "z_training = np.abs(stats.zscore(z_df))\n",
    "\n",
    "# Nr. of outliers over 3,4,5 stds\n",
    "traing_z_3 = np.where(z_training > 3)[0]\n",
    "traing_z_4 = np.where(z_training > 4)[0]\n",
    "traing_z_5 = np.where(z_training > 5)[0]\n",
    "\n",
    "# Printing \n",
    "print(\"Precentage 1 stds away: {:.0f}\".format(len(traing_z_3)/z_training.shape[0]*100))\n",
    "print(\"Precentage 2 stds away: {:.0f}\".format(len(traing_z_4)/z_training.shape[0]*100))\n",
    "print(\"Precentage 3 stds away: {:.0f}\".format(len(traing_z_5)/z_training.shape[0]*100))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "c. 8% of outliers > 5std"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's take a note of these outliers. However, we will not remove these outliers for now as they probably serve legitimate observations of the chemical compunds and are interesting for the prediction."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "2 columns passed, passed data had 3 columns",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAssertionError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36m_list_to_arrays\u001b[0;34m(data, columns, coerce_float, dtype)\u001b[0m\n\u001b[1;32m    563\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 564\u001b[0;31m         \u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_validate_or_indexify_columns\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcontent\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    565\u001b[0m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_convert_object_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcontent\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcoerce_float\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcoerce_float\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36m_validate_or_indexify_columns\u001b[0;34m(content, columns)\u001b[0m\n\u001b[1;32m    687\u001b[0m             \u001b[0;31m# caller's responsibility to check for this...\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 688\u001b[0;31m             raise AssertionError(\n\u001b[0m\u001b[1;32m    689\u001b[0m                 \u001b[0;34mf\"{len(columns)} columns passed, passed data had \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAssertionError\u001b[0m: 2 columns passed, passed data had 3 columns",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-75-7aa6a24a57a5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m pd.DataFrame(data = [['1 std', '2 std', '3std'],\n\u001b[0m\u001b[1;32m      2\u001b[0m                      [len(traing_z_3)/z_training.shape[0]*100, len(traing_z_4)/z_training.shape[0]*100,\n\u001b[1;32m      3\u001b[0m                       len(traing_z_5)/z_training.shape[0]*100]], \n\u001b[1;32m      4\u001b[0m              columns = ['stds away from mean', 'fraction of data set'])\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, index, columns, dtype, copy)\u001b[0m\n\u001b[1;32m    507\u001b[0m                     \u001b[0;32mif\u001b[0m \u001b[0mis_named_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mcolumns\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    508\u001b[0m                         \u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fields\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 509\u001b[0;31m                     \u001b[0marrays\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mto_arrays\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    510\u001b[0m                     \u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    511\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36mto_arrays\u001b[0;34m(data, columns, coerce_float, dtype)\u001b[0m\n\u001b[1;32m    522\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m  \u001b[0;31m# columns if columns is not None else []\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    523\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 524\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_list_to_arrays\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcoerce_float\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcoerce_float\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    525\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mabc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMapping\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    526\u001b[0m         return _list_of_dict_to_arrays(\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36m_list_to_arrays\u001b[0;34m(data, columns, coerce_float, dtype)\u001b[0m\n\u001b[1;32m    565\u001b[0m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_convert_object_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcontent\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcoerce_float\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcoerce_float\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    566\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mAssertionError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 567\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    568\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    569\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: 2 columns passed, passed data had 3 columns"
     ]
    }
   ],
   "source": [
    "pd.DataFrame(data = [['1 std', '2 std', '3std'],\n",
    "                     [len(traing_z_3)/z_training.shape[0]*100, len(traing_z_4)/z_training.shape[0]*100,\n",
    "                      len(traing_z_5)/z_training.shape[0]*100]], \n",
    "             columns = ['stds away from mean', 'fraction of data set'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "outliers = pd.DataFrame(data = [{'1 std':len(traing_z_3)/z_training.shape[0]*100}, \n",
    "                     {'2 std':len(traing_z_4)/z_training.shape[0]*100}\n",
    "                     , {'3 std':len(traing_z_5)/z_training.shape[0]*100}])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(data = outliers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = sns.barplot(data = outliers)\n",
    "ax.set(xlabel='std away from mean', ylabel='Fraction of data set')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Normalization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['nrAtoms', 'ExactMolWT', 'Fragments', 'Lipinski']"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(X_train[['nrAtoms', 'ExactMolWT', 'Fragments', 'Lipinski']].columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Normalization - minmax\n",
    "X_train_minmax, normalization = create_normalization(X_train, normalizationtype = \"minmax\")\n",
    "X_test_minmax = apply_normalization(X_test, normalization)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>nrAtoms</th>\n",
       "      <th>ExactMolWT</th>\n",
       "      <th>Fragments</th>\n",
       "      <th>Lipinski</th>\n",
       "      <th>fp_0</th>\n",
       "      <th>fp_1</th>\n",
       "      <th>fp_2</th>\n",
       "      <th>fp_3</th>\n",
       "      <th>fp_4</th>\n",
       "      <th>...</th>\n",
       "      <th>fp_114</th>\n",
       "      <th>fp_115</th>\n",
       "      <th>fp_116</th>\n",
       "      <th>fp_117</th>\n",
       "      <th>fp_118</th>\n",
       "      <th>fp_119</th>\n",
       "      <th>fp_120</th>\n",
       "      <th>fp_121</th>\n",
       "      <th>fp_122</th>\n",
       "      <th>fp_123</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>60770.352644</td>\n",
       "      <td>0.265317</td>\n",
       "      <td>0.257788</td>\n",
       "      <td>0.006612</td>\n",
       "      <td>0.265317</td>\n",
       "      <td>0.126760</td>\n",
       "      <td>0.241631</td>\n",
       "      <td>0.321097</td>\n",
       "      <td>0.399885</td>\n",
       "      <td>0.174419</td>\n",
       "      <td>...</td>\n",
       "      <td>0.188028</td>\n",
       "      <td>0.157733</td>\n",
       "      <td>0.123944</td>\n",
       "      <td>0.118991</td>\n",
       "      <td>0.177547</td>\n",
       "      <td>0.249087</td>\n",
       "      <td>0.355407</td>\n",
       "      <td>0.405047</td>\n",
       "      <td>0.915893</td>\n",
       "      <td>0.106059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>34977.492340</td>\n",
       "      <td>0.067346</td>\n",
       "      <td>0.069522</td>\n",
       "      <td>0.038996</td>\n",
       "      <td>0.067346</td>\n",
       "      <td>0.332712</td>\n",
       "      <td>0.428083</td>\n",
       "      <td>0.466910</td>\n",
       "      <td>0.489887</td>\n",
       "      <td>0.379479</td>\n",
       "      <td>...</td>\n",
       "      <td>0.390745</td>\n",
       "      <td>0.364500</td>\n",
       "      <td>0.329526</td>\n",
       "      <td>0.323786</td>\n",
       "      <td>0.382141</td>\n",
       "      <td>0.432496</td>\n",
       "      <td>0.478649</td>\n",
       "      <td>0.490914</td>\n",
       "      <td>0.277555</td>\n",
       "      <td>0.307921</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>7.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>30560.250000</td>\n",
       "      <td>0.224719</td>\n",
       "      <td>0.211344</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.224719</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>60775.000000</td>\n",
       "      <td>0.258427</td>\n",
       "      <td>0.255117</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.258427</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>90978.750000</td>\n",
       "      <td>0.303371</td>\n",
       "      <td>0.301373</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.303371</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>121367.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 129 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                  ID       nrAtoms    ExactMolWT     Fragments      Lipinski  \\\n",
       "count   19178.000000  19178.000000  19178.000000  19178.000000  19178.000000   \n",
       "mean    60770.352644      0.265317      0.257788      0.006612      0.265317   \n",
       "std     34977.492340      0.067346      0.069522      0.038996      0.067346   \n",
       "min         7.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%     30560.250000      0.224719      0.211344      0.000000      0.224719   \n",
       "50%     60775.000000      0.258427      0.255117      0.000000      0.258427   \n",
       "75%     90978.750000      0.303371      0.301373      0.000000      0.303371   \n",
       "max    121367.000000      1.000000      1.000000      1.000000      1.000000   \n",
       "\n",
       "               fp_0          fp_1          fp_2          fp_3          fp_4  \\\n",
       "count  19178.000000  19178.000000  19178.000000  19178.000000  19178.000000   \n",
       "mean       0.126760      0.241631      0.321097      0.399885      0.174419   \n",
       "std        0.332712      0.428083      0.466910      0.489887      0.379479   \n",
       "min        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "50%        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "75%        0.000000      0.000000      1.000000      1.000000      0.000000   \n",
       "max        1.000000      1.000000      1.000000      1.000000      1.000000   \n",
       "\n",
       "       ...        fp_114        fp_115        fp_116        fp_117  \\\n",
       "count  ...  19178.000000  19178.000000  19178.000000  19178.000000   \n",
       "mean   ...      0.188028      0.157733      0.123944      0.118991   \n",
       "std    ...      0.390745      0.364500      0.329526      0.323786   \n",
       "min    ...      0.000000      0.000000      0.000000      0.000000   \n",
       "25%    ...      0.000000      0.000000      0.000000      0.000000   \n",
       "50%    ...      0.000000      0.000000      0.000000      0.000000   \n",
       "75%    ...      0.000000      0.000000      0.000000      0.000000   \n",
       "max    ...      1.000000      1.000000      1.000000      1.000000   \n",
       "\n",
       "             fp_118        fp_119        fp_120        fp_121        fp_122  \\\n",
       "count  19178.000000  19178.000000  19178.000000  19178.000000  19178.000000   \n",
       "mean       0.177547      0.249087      0.355407      0.405047      0.915893   \n",
       "std        0.382141      0.432496      0.478649      0.490914      0.277555   \n",
       "min        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%        0.000000      0.000000      0.000000      0.000000      1.000000   \n",
       "50%        0.000000      0.000000      0.000000      0.000000      1.000000   \n",
       "75%        0.000000      0.000000      1.000000      1.000000      1.000000   \n",
       "max        1.000000      1.000000      1.000000      1.000000      1.000000   \n",
       "\n",
       "             fp_123  \n",
       "count  19178.000000  \n",
       "mean       0.106059  \n",
       "std        0.307921  \n",
       "min        0.000000  \n",
       "25%        0.000000  \n",
       "50%        0.000000  \n",
       "75%        0.000000  \n",
       "max        1.000000  \n",
       "\n",
       "[8 rows x 129 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_minmax.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'nrAtoms': ('minmax', 1.0, 90.0),\n",
       " 'ExactMolWT': ('minmax', 41.026549096, 1252.6379767359995),\n",
       " 'Fragments': ('minmax', 0.0, 5.0),\n",
       " 'Lipinski': ('minmax', 1.0, 90.0)}"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "normalization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Normalizaiton - zscore\n",
    "X_train_zscore, normalization = create_normalization(X_train, normalizationtype = \"zscore\")\n",
    "X_test_zscore = apply_normalization(X_test, normalization)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>nrAtoms</th>\n",
       "      <th>ExactMolWT</th>\n",
       "      <th>Fragments</th>\n",
       "      <th>Lipinski</th>\n",
       "      <th>fp_0</th>\n",
       "      <th>fp_1</th>\n",
       "      <th>fp_2</th>\n",
       "      <th>fp_3</th>\n",
       "      <th>fp_4</th>\n",
       "      <th>...</th>\n",
       "      <th>fp_114</th>\n",
       "      <th>fp_115</th>\n",
       "      <th>fp_116</th>\n",
       "      <th>fp_117</th>\n",
       "      <th>fp_118</th>\n",
       "      <th>fp_119</th>\n",
       "      <th>fp_120</th>\n",
       "      <th>fp_121</th>\n",
       "      <th>fp_122</th>\n",
       "      <th>fp_123</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>19178.000000</td>\n",
       "      <td>1.917800e+04</td>\n",
       "      <td>1.917800e+04</td>\n",
       "      <td>1.917800e+04</td>\n",
       "      <td>1.917800e+04</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "      <td>19178.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>60770.352644</td>\n",
       "      <td>-2.065531e-17</td>\n",
       "      <td>1.586459e-14</td>\n",
       "      <td>1.653163e-15</td>\n",
       "      <td>-2.065531e-17</td>\n",
       "      <td>0.126760</td>\n",
       "      <td>0.241631</td>\n",
       "      <td>0.321097</td>\n",
       "      <td>0.399885</td>\n",
       "      <td>0.174419</td>\n",
       "      <td>...</td>\n",
       "      <td>0.188028</td>\n",
       "      <td>0.157733</td>\n",
       "      <td>0.123944</td>\n",
       "      <td>0.118991</td>\n",
       "      <td>0.177547</td>\n",
       "      <td>0.249087</td>\n",
       "      <td>0.355407</td>\n",
       "      <td>0.405047</td>\n",
       "      <td>0.915893</td>\n",
       "      <td>0.106059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>34977.492340</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>0.332712</td>\n",
       "      <td>0.428083</td>\n",
       "      <td>0.466910</td>\n",
       "      <td>0.489887</td>\n",
       "      <td>0.379479</td>\n",
       "      <td>...</td>\n",
       "      <td>0.390745</td>\n",
       "      <td>0.364500</td>\n",
       "      <td>0.329526</td>\n",
       "      <td>0.323786</td>\n",
       "      <td>0.382141</td>\n",
       "      <td>0.432496</td>\n",
       "      <td>0.478649</td>\n",
       "      <td>0.490914</td>\n",
       "      <td>0.277555</td>\n",
       "      <td>0.307921</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>7.000000</td>\n",
       "      <td>-3.939591e+00</td>\n",
       "      <td>-3.708022e+00</td>\n",
       "      <td>-1.695510e-01</td>\n",
       "      <td>-3.939591e+00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>30560.250000</td>\n",
       "      <td>-6.028213e-01</td>\n",
       "      <td>-6.680473e-01</td>\n",
       "      <td>-1.695510e-01</td>\n",
       "      <td>-6.028213e-01</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>60775.000000</td>\n",
       "      <td>-1.023058e-01</td>\n",
       "      <td>-3.841494e-02</td>\n",
       "      <td>-1.695510e-01</td>\n",
       "      <td>-1.023058e-01</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>90978.750000</td>\n",
       "      <td>5.650482e-01</td>\n",
       "      <td>6.269340e-01</td>\n",
       "      <td>-1.695510e-01</td>\n",
       "      <td>5.650482e-01</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>121367.000000</td>\n",
       "      <td>1.090903e+01</td>\n",
       "      <td>1.067598e+01</td>\n",
       "      <td>2.547437e+01</td>\n",
       "      <td>1.090903e+01</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 129 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                  ID       nrAtoms    ExactMolWT     Fragments      Lipinski  \\\n",
       "count   19178.000000  1.917800e+04  1.917800e+04  1.917800e+04  1.917800e+04   \n",
       "mean    60770.352644 -2.065531e-17  1.586459e-14  1.653163e-15 -2.065531e-17   \n",
       "std     34977.492340  1.000000e+00  1.000000e+00  1.000000e+00  1.000000e+00   \n",
       "min         7.000000 -3.939591e+00 -3.708022e+00 -1.695510e-01 -3.939591e+00   \n",
       "25%     30560.250000 -6.028213e-01 -6.680473e-01 -1.695510e-01 -6.028213e-01   \n",
       "50%     60775.000000 -1.023058e-01 -3.841494e-02 -1.695510e-01 -1.023058e-01   \n",
       "75%     90978.750000  5.650482e-01  6.269340e-01 -1.695510e-01  5.650482e-01   \n",
       "max    121367.000000  1.090903e+01  1.067598e+01  2.547437e+01  1.090903e+01   \n",
       "\n",
       "               fp_0          fp_1          fp_2          fp_3          fp_4  \\\n",
       "count  19178.000000  19178.000000  19178.000000  19178.000000  19178.000000   \n",
       "mean       0.126760      0.241631      0.321097      0.399885      0.174419   \n",
       "std        0.332712      0.428083      0.466910      0.489887      0.379479   \n",
       "min        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "50%        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "75%        0.000000      0.000000      1.000000      1.000000      0.000000   \n",
       "max        1.000000      1.000000      1.000000      1.000000      1.000000   \n",
       "\n",
       "       ...        fp_114        fp_115        fp_116        fp_117  \\\n",
       "count  ...  19178.000000  19178.000000  19178.000000  19178.000000   \n",
       "mean   ...      0.188028      0.157733      0.123944      0.118991   \n",
       "std    ...      0.390745      0.364500      0.329526      0.323786   \n",
       "min    ...      0.000000      0.000000      0.000000      0.000000   \n",
       "25%    ...      0.000000      0.000000      0.000000      0.000000   \n",
       "50%    ...      0.000000      0.000000      0.000000      0.000000   \n",
       "75%    ...      0.000000      0.000000      0.000000      0.000000   \n",
       "max    ...      1.000000      1.000000      1.000000      1.000000   \n",
       "\n",
       "             fp_118        fp_119        fp_120        fp_121        fp_122  \\\n",
       "count  19178.000000  19178.000000  19178.000000  19178.000000  19178.000000   \n",
       "mean       0.177547      0.249087      0.355407      0.405047      0.915893   \n",
       "std        0.382141      0.432496      0.478649      0.490914      0.277555   \n",
       "min        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%        0.000000      0.000000      0.000000      0.000000      1.000000   \n",
       "50%        0.000000      0.000000      0.000000      0.000000      1.000000   \n",
       "75%        0.000000      0.000000      1.000000      1.000000      1.000000   \n",
       "max        1.000000      1.000000      1.000000      1.000000      1.000000   \n",
       "\n",
       "             fp_123  \n",
       "count  19178.000000  \n",
       "mean       0.106059  \n",
       "std        0.307921  \n",
       "min        0.000000  \n",
       "25%        0.000000  \n",
       "50%        0.000000  \n",
       "75%        0.000000  \n",
       "max        1.000000  \n",
       "\n",
       "[8 rows x 129 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_zscore.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Zscore handles outliers better which is as seen apparent in the data set. However the features does not belong to the same scale. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us try out both minmax and zscore in our predicitons and evaluate performace."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Baseline model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "dt = DecisionTreeClassifier(criterion = \"gini\", splitter = \"best\", max_depth=8).fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.9010\n",
      "AUC: 0.3878\n",
      "Brier score: 0.6278\n"
     ]
    }
   ],
   "source": [
    "predictions = dt.predict(X_test)\n",
    "#predicitons = pd.DataFrame(predictions)\n",
    "print(\"Accuracy: {:.4f}\".format(accuracy(pd.DataFrame(predictions), y_test)))\n",
    "print(\"AUC: {:.4f}\".format(auc(pd.DataFrame(predictions), y_test)))  # Comment this out if not implemented in assignment 1\n",
    "## Comment this out if not implemented in assignment 1\n",
    "print(\"Brier score: {:.4f}\".format(brier_score(pd.DataFrame(predictions), y_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24270</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24271</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24272</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24273</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24274</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>24275 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         0\n",
       "0      0.0\n",
       "1      1.0\n",
       "2      1.0\n",
       "3      0.0\n",
       "4      0.0\n",
       "...    ...\n",
       "24270  1.0\n",
       "24271  1.0\n",
       "24272  0.0\n",
       "24273  0.0\n",
       "24274  0.0\n",
       "\n",
       "[24275 rows x 1 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(predictions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25810     0.0\n",
       "71590     0.0\n",
       "71598     0.0\n",
       "34947     0.0\n",
       "36616     0.0\n",
       "         ... \n",
       "78665     0.0\n",
       "112910    1.0\n",
       "20950     0.0\n",
       "85325     0.0\n",
       "113649    0.0\n",
       "Name: CLASS, Length: 24275, dtype: float64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "rf = RandomForestClassifier(criterion = \"gini\", max_features = \"log2\", max_depth=8).fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.9010\n",
      "AUC: 0.3314\n",
      "Brier score: 0.6272\n"
     ]
    }
   ],
   "source": [
    "predictions = rf.predict(X_test)\n",
    "#predicitons = pd.DataFrame(predictions)\n",
    "print(\"Accuracy: {:.4f}\".format(accuracy(pd.DataFrame(predictions), y_test)))\n",
    "print(\"AUC: {:.4f}\".format(auc(pd.DataFrame(predictions), y_test)))  # Comment this out if not implemented in assignment 1\n",
    "## Comment this out if not implemented in assignment 1\n",
    "print(\"Brier score: {:.4f}\".format(brier_score(pd.DataFrame(predictions), y_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Feature analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Permutation importance "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.inspection import permutation_importance\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-32-14e5cba10106>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# get the permutation_importance of classifier\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m result = permutation_importance(dt, X_train, y_train, n_repeats=10,\n\u001b[0m\u001b[1;32m      3\u001b[0m                                 random_state=42, n_jobs=-2)\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# sort on importance\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0msorted_idx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimportances_mean\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margsort\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/sklearn/inspection/_permutation_importance.py\u001b[0m in \u001b[0;36mpermutation_importance\u001b[0;34m(estimator, X, y, scoring, n_repeats, n_jobs, random_state)\u001b[0m\n\u001b[1;32m    114\u001b[0m     \u001b[0mbaseline_score\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mscorer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    115\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 116\u001b[0;31m     scores = Parallel(n_jobs=n_jobs)(delayed(_calculate_permutation_scores)(\n\u001b[0m\u001b[1;32m    117\u001b[0m         \u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol_idx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_seed\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_repeats\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscorer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    118\u001b[0m     ) for col_idx in range(X.shape[1]))\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1059\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1060\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieval_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1061\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1062\u001b[0m             \u001b[0;31m# Make sure that we get a last message telling us we are done\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1063\u001b[0m             \u001b[0melapsed_time\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_start_time\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mretrieve\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    938\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    939\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'supports_timeout'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 940\u001b[0;31m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    941\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    942\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mwrap_future_result\u001b[0;34m(future, timeout)\u001b[0m\n\u001b[1;32m    540\u001b[0m         AsyncResults.get from multiprocessing.\"\"\"\n\u001b[1;32m    541\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 542\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfuture\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    543\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mCfTimeoutError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    544\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mTimeoutError\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/concurrent/futures/_base.py\u001b[0m in \u001b[0;36mresult\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    432\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__get_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    433\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 434\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_condition\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    435\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    436\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_state\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mCANCELLED\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mCANCELLED_AND_NOTIFIED\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/threading.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    300\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m    \u001b[0;31m# restore state no matter what (e.g., KeyboardInterrupt)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    301\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 302\u001b[0;31m                 \u001b[0mwaiter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    303\u001b[0m                 \u001b[0mgotit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    304\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "# get the permutation_importance of classifier\n",
    "result = permutation_importance(dt, X_train, y_train, n_repeats=10,\n",
    "                                random_state=42, n_jobs=-2)\n",
    "# sort on importance\n",
    "sorted_idx = result.importances_mean.argsort()\n",
    "#top15_idx = sorted_idx[:15]\n",
    "\n",
    "# plot\n",
    "fig, ax = plt.subplots(figsize=(20, 50))\n",
    "ax.boxplot(result.importances[sorted_idx].T,\n",
    "           vert=False, labels=X_train.columns[sorted_idx])\n",
    "ax.set_title(\"Permutation Importances Decision Tree Classifier\", fontsize=30)\n",
    "fig.tight_layout()\n",
    "\n",
    "for label in (ax.get_xticklabels() + ax.get_yticklabels()):\n",
    "    label.set_fontname('Arial')\n",
    "    label.set_fontsize(20)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Decision tree feature importance "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get feauture names\n",
    "feature_names = X_train.columns\n",
    "\n",
    "# get feauture importance\n",
    "tree_feature_importances = dt.feature_importances_\n",
    "\n",
    "# sort with respect to feature importance \n",
    "sorted_idx = tree_feature_importances.argsort()\n",
    "\n",
    "# plotting\n",
    "y_ticks = np.arange(0, len(feature_names))\n",
    "fig, ax = plt.subplots(figsize=(20, 50))\n",
    "ax.barh(y_ticks, tree_feature_importances[sorted_idx])\n",
    "ax.set_yticklabels(feature_names[sorted_idx])\n",
    "ax.set_yticks(y_ticks)\n",
    "ax.set_title(\"Decision Tree Feature Importances\", fontsize=30)\n",
    "fig.tight_layout()\n",
    "\n",
    "for label in (ax.get_xticklabels() + ax.get_yticklabels()):\n",
    "    label.set_fontname('Arial')\n",
    "    label.set_fontsize(20)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hierarchical clustering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.stats import spearmanr\n",
    "from scipy.cluster import hierarchy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1440 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Hierarchical cluster and correlation matrix\n",
    "\n",
    "feature_names = X_train.columns\n",
    "\n",
    "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 20))\n",
    "corr = spearmanr(X_train).correlation\n",
    "corr_linkage = hierarchy.ward(corr)\n",
    "dendro = hierarchy.dendrogram(\n",
    "    corr_linkage, labels=feature_names.tolist(), ax=ax1, leaf_rotation=90\n",
    ")\n",
    "dendro_idx = np.arange(0, len(dendro['ivl']))\n",
    "\n",
    "ax2.imshow(corr[dendro['leaves'], :][:, dendro['leaves']])\n",
    "ax2.set_xticks(dendro_idx)\n",
    "ax2.set_yticks(dendro_idx)\n",
    "ax2.set_xticklabels(dendro['ivl'], rotation='vertical')\n",
    "ax2.set_yticklabels(dendro['ivl'])\n",
    "fig.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1440 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Only correlation matrix\n",
    "\n",
    "feature_names = X_train.columns\n",
    "\n",
    "fig, (ax2) = plt.subplots(figsize=(20, 20))\n",
    "corr = spearmanr(X_train).correlation\n",
    "corr_linkage = hierarchy.ward(corr)\n",
    "dendro = hierarchy.dendrogram(\n",
    "    corr_linkage, labels=feature_names.tolist(), ax=ax1, leaf_rotation=90\n",
    ")\n",
    "dendro_idx = np.arange(0, len(dendro['ivl']))\n",
    "\n",
    "ax2.imshow(corr[dendro['leaves'], :][:, dendro['leaves']])\n",
    "ax2.set_xticks(dendro_idx)\n",
    "ax2.set_yticks(dendro_idx)\n",
    "ax2.set_xticklabels(dendro['ivl'], rotation='vertical')\n",
    "ax2.set_yticklabels(dendro['ivl'])\n",
    "fig.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAACz0AAAXrCAYAAACrHDY4AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8vihELAAAACXBIWXMAAAsTAAALEwEAmpwYAADq+0lEQVR4nOzdebTkdXnn8c8D7ZKoRBCijEhaEgVxCRiUISERFTdc0ImGRDOjzBkxmjEh28xBR0WzmGSSmFGzgBtmIRIyEcIBcTJG1ERcI3ECiomCGEQREcEFUfjOH1UNRXOX6tvVfZ/ufr3OqVO/W/Wr3/epuvf+0+d9v11jjAAAAAAAAAAAAAAAdLXbeg8AAAAAAAAAAAAAALAS0TMAAAAAAAAAAAAA0JroGQAAAAAAAAAAAABoTfQMAAAAAAAAAAAAALQmegYAAAAAAAAAAAAAWhM9AwAAAAAAAAAAAACtiZ4BAAAAgJaq6nlVNaa35633PDuLqjpq5nM9eSuvtXHmWqctZsJtp6ou2DTvOs+xsO8BAAAAAMCuQvQMAAAAAGyVmXhz7pB0s+jzgm04HrAVpmH7ydPbUes9DwAAAACw69qw3gMAAAAAAABtbUzyipmvL1ifMQAAAACAXZ3oGQAAAABoaYxxWpLT1nkMVjDGuDxJrfccAAAAAADs/HZb7wEAAAAAAAAAAAAAAFYiegYAAAAAAAAAAAAAWhM9AwAAAAAtVdXzqmpMb89b5dzdquonquqMqrqsqr5RVTdU1Ser6o+q6qGrvP7kmbWOmj722Kr6i+n1bpw+t3HmNRuq6glV9btV9fdVdXVV3TRd91NVdVpV/dgc7/O0mbU3Th/7D1X1N1V1xfSaY5nXHlZVr62qf6qqL1fVt6vq2qr64HSuw1dbf3qd/afnf7Kqvl5V11XV+6vqRVW1YYXXbZyZ/bQ51lnTvFW1R1U9p6reVFUfm8636bX/OH3t98/zXhetqh5TVadW1Sdm5vpSVb2vqn6tqg5ewzXn/lznPbeqHl5Vf1xV/6+qrp/OeXVVXVJV51TVi6vq/jPnHzX9uXv3zGVeMbPWrbcV1ty/qn69qj40/UxuqqovVNXfVtULq+rOq7y3TWtcMP16z6o6qao+XFXXzPtzBwAAAADsHJb9x2oAAAAAgB3BNHb9qySHLPH0gdPbCVX162OMl893yXp9kp9d5by/TXLUEo/fKckDprfnVtVbk5wwxrhpjrXvUlV/neQZqwx4tySnJnn2Ek/vmeSR09svVtXGMcZnV7jWE5P8RZJ7bvbUEdPb06vqqWOMb80x/8LnnYaxVye5yzKv3TPJoUl+rqpOHGP8wVrn3BJVtU+S05McvcTTeyc5cnp7aZLaHjMtp6pOTvLyJebYZ3p7UJKnJHlskqcvaM2Tkrwid/y+3Xt6OzrJL1TVU8YYn5rjeg9PclaS+y1iPgAAAABgxyN6BgAAAAB2WNPg+QOZRKZJ8sEkZye5LMnuSR6e5HlJ9krysqq6ZYxx8iqX/ZUkT0ryhSSnJfnnTP4t9ZFJZsPf70rytSTvSvLRJJcnuTHJvkkenOQ5Se6W5LlJrkty4hxv6TXTtT+d5E+TXJrku5M8auY93zWT3XcfMX3oxiR/meQfknwlyR5JHpLkmCQPzMrB7SHT91tJTkly4fQ9HpbkZ6bzPy6TcHeeYPwOFjDvbpmEs5/PJDT/eJIvJrklkwD2h5M8NZPv0eur6vNjjLevZdZ5TYPnDybZtDPyVzMJxz+c5Pok98rks31Kkv225SyrqapjM4mPk+Sbmcz5gSTXJrlrJvMdlsn3edY/ZxLfPyTJr04fOyPJ2+ZY8zW57ef9hulrPpTJ53SfTMLqx2TyhwHvrapDxhhfWOGS98rk93q/JOclOTfJNUnum2TZnaYBAAAAgJ2L6BkAAAAA2CFV1W6ZxLN7J7k5yfPHGG/Z7LQ/r6rfSvLOTCLUl1XVmWOMi1e49JOS/H2SJ48xrp95/K2bnffSJO8fY3xzmfleksnOtEcmeXFV/a8xxmWrvK0nJTkzyU9vtjP0m2eOfy+3BcT/lORpY4wrlrjWL1TVYzIJrpdzbJIrkhw9xviXmcffVlWbwuQNSf7rdKfstez2vLXzfjuTz+WdY4wlA9eqelgm3+P7JPmdqjp7jHHLGmad11tzW/D8riQ/Mca4dom5XpQF7Zy8FZ4/vb85k+/z+5c6aRqnP2zT12OMa5KcVVXXzZz2yTHGWSstNo2sT5x++f4kP75E0Py6qjohk9D+3kl+P8lPrnDZh0zn/4kxxpkrrQ8AAAAA7Lx2W+8BAAAAAICdR1WNeW6Z7Py7tZ6eyU7OSfLKJYLnJMkY4+okx2USTe6W5OdXue7Xkxy3WfC81HXftVzwPH3+y5ns8pzpus9ZZd0k+bckx28WPN+qqvbPbRHrl5M8aZmAeNMMfzfGuG6VNX96s+B502s/lMnOvkmyZyY7XW+RRcw7xrh5jHH+csHz9JyPJ3nJ9MsDMtn9eZuoqiMyibCT5F+THLtU8Dyda2zrXafn8APT+4uXC56TZIxx4/R7vrVeNb2/JslTl9vBeYxxaia7mSfJM6vqfqtc97WCZwAAAADYtYmeAQAAAIAd1X+c3t+U5HUrnTjG+FSSTUHn41e57v8eY3x+K2fbtO5nkmyKPg+f4yVvHmN8fYXnj8tt/4Pf68YYV23NfEk+NsZ43wrP/93M8cFruP6i513JbNA7z2e9Vj89c/xrq3y/OvjG9H6/qvqebblQVf1gbtst+s3LxeAz/mx6v3uSx65y7oq/4wAAAADAzm/D6qcAAAAAAMztGXOe95Akv7qVa/3o9P7qJEdV1Wrn3zy9/76q+q4VdmleKQK+naraI5MdnI9J8tAkeye52zKn7zfHJVdb+8iZ47+Z43qr+cAqz185c7znGq6/sHmramMmO2cfleSgJPdMctdlTp/ns16rTe9pJDlnG66zKH+b5NAkeyV5T1X9VpJzV9vJfI1+dOZ4t6p6+irn33fm+EErnHflGOOyNU8FAAAAAOwURM8AAAAAwMKMMc6a57yqum5r1qmquye51/TL/ZK8fQsvsWeS5aLnK5d5fPMZHp3k9CT3mXPNPeY4Z7W1Z2PeT8y57kquWeX5b80cLxcYr2Qh81bViUl+M8ld5nzJPJ/1Wm16T1fPsZNxB7+Z5CmZ7NT9g5n8zN5cVRcl+Yck707yzhX+CGBLbJw5/uXpbV4rRfVz/U4CAAAAADs30TMAAAAAsCP6nq18/Z1XeG7V+LOqHpDk3CTfNX3o0iTvSPIvSa5NcuPM6acm2SfJ7nPMtdram2Lem8cYN6545nxuWcA1VrLV81bVc5K8Zuah9yV5T5LLk9yQ5Kbp49+b5JTp8Tyf9Vptek9f24ZrLMwY4ytV9e+T/Pck/yXJvTP5fH5oevu5JDdU1e8n+bUxxk3LXWsOW/N7uVW/kwAAAADAzk/0DAAAAADsiGaD0wvGGI/ezuuflNuC519P8rIxxljqxKp6wwLXvX56v3tV3XVB4fO2tIh5XzW9/06Sp40x3rHUSVX14LUMuAbXJ9kryd2303qr2W21E8YYNyT5H1X18kx2e/6RJEcmeWySvZPcI8nLkjyyqp603M/yHGZ/L48aY7xnjdcBAAAAALiDVf8xFAAAAACgmzHGV3NbYHlwVdV2HuHo6f3VSV6+QvB8j0wC2UX5t5njBy3wutvKVs1bVQckOWD65VnLBc9T37el11+jTe/pe6tqkd/bWd+aOV5pB+RkEi3PZYxxyxjjY2OM148xfjKTXZ+fkcnu5EnyhCRP3qJJb+/KmePtFaEDAAAAALsI0TMAAAAAsKN67/T+e5P88HZe+97T+8vGGLescN7RWey/w75v5vhpC7zutrK189575vjTq5z7hDVcfy02vadK8tRttMZ1M8f/bpVzD1/rItMI+qwkL595+MjNTpv9+V7tjwtmd3Z+xlrnAgAAAABYiugZAAAAANhRvXXm+DeqavftuPY3pvcHLLfL9HSelyx43TOSfHt6/OKq2nfB11+0rZ33GzPH37/cSVW1X5Ljt/Daa/VnM8cvraq7LXqBMcY3k1w+/fIRVXX3pc6rqjsleeEClrx85njDZs99beZ4tff6kSQXT4+PrqrHbeVcAAAAAAC3Ej0DAAAAADuqv0ry4enxjyX586q6x3InV9Vdq+q5VfWTC1h707r7JDlxibXulOQNSQ5bwFq3GmN8bnrdJLlXkvOqav/lzq+qR1XVPRc5w5ZYwLyfSPL16fGxVfXIJV5z7yRnJ1n2e79IY4wPJDlv+uUDkpxVVXstdW5NrHVH7vOn99+d5JVLXHtDklOSPGili1TVqVX1kBWe35Dk+TMP/dNmp1w2c/zwldYaY4wkJ808dEZVrbgDd1U9qKr+aKVzAAAAAACSO+7YAAAAAACwQxhj3FJVP57kwiT3TXJcksdX1RlJPprkukyC0fsl+aEkj0ty9yQvW8Dyr5teL0l+r6qOSvLOJF/OJIT9T9P7d0/v91vAmpv8UpJHTG+HJLl0+p7fn+TaTOLfByc5JpMg9v6ZfBbrZc3zjjFuqqpTkvxikjsleW9VvTmT6PzbmUS4xye5Z5I/yeRz3x6em+RD01mPTvLpqnrbdK7rk+yZ5GFJnprk+5IsuRv4Kl6b5D8nuXOSX6yqg5L8dZIbkvxAJu/1wCRvS7JSyP/8JM+vqosz+Xn850w+97slOWD62gdMz/1UJn9McKsxxleq6mNJDk3y6Kr64yTvms6x6ZzzZ47PqapXJXl5Jp/D+VX1viTvSPLZJN9Jslcm3/NHJXlokpuzmB2rAQAAAICdmOgZAAAAANhhjTE+V1WPSPKnSR6bSWT5Myu85OYkX1jAuudU1atz2662T5veZv1DJiH2h7NAY4wbq+oxSd6S5JlJ7ppJhPvcZV5yyyLX31ILmPelmQa3Se6SSRy7eSB7SpLfznaKnscY11TVEUnOyCTcvWcmP3dL/eyNNa7xiap6UZJTM/lfG4+Z3ma9Mcmrs3L0PDKJrh88vS3n40mOHWN8c4nnXprknCS7J3nB9DbrdlH3GOMVVfW5JL+bZI8kPzq9LeffVngOAAAAACDJ5B9KAQAAAAB2WGOMq8YYRyc5KpP49eJMdgq+OZNddy/JJE59YZL7jTHeuKB1X5LkSUnOTXJNJjsPX5Xk7zLZXfeoMcaXFrHWEmt/bYzxrCQ/kkkUe2kmO+9+J5Pdpi/MJAI+dIxxxbaYYUtszbxjjBuTPD7Ji6bn3ZDkW5nsGvyXSZ4wxviZbOe4e4zxxTHGUZmEyH+a5DNJvp7Jz8HVSd6T5ORMdmNe6xpvSnJEJu/zqum1v5DJz9xTxhjPz+rv+z5JfirJG5L8Y5KvZPK78c0klyd5e5LnJHn4GOPyZeZ4Rybfu9OTXDZ97WqzvzGTXa5/Kcn/SfL5TL5v35q+h/cm+Z+Z/LHCAatdDwAAAACgxljTJhMAAAAAAAAAAAAAANuFnZ4BAAAAAAAAAAAAgNZEzwAAAAAAAAAAAABAa6JnAAAAAAAAAAAAAKA10TMAAAAAAAAAAAAA0JroGQAAAAAAAAAAAABobcP2WGTvvfceGzdu3B5LAQAAAAAAAAAAAAA7oI9+9KPXjDH2Weq57RI9b9y4MR/5yEe2x1IAAAAAAAAAAAAAwA6oqj673HO7bc9BAAAAAAAAAAAAAAC2lOgZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK1tWO8BFu30D16Rsy+6cr3HAAAAAAAAgDaOPeS+efbh+6/3GAAAAABrttPt9Hz2RVfmkquuX+8xAAAAAAAAoIVLrrrepkEAAADADm+n2+k5SQ7ed4+c8YIj1nsMAAAAAAAAWHfHnXLheo8AAAAAsNV2up2eAQAAAAAAAAAAAICdi+gZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBra4qeq+p3qmpU1VGLHQcAAAAAAAAAAAAA4Pa2OHquqkcmOXHxowAAAAAAAAAAAAAA3NEWRc9Vdeckb0qy+7YZBwAAAAAAAAAAAADg9rZ0p+eXJnlgkv+7DWYBAAAAAAAAAAAAALiDuaPnqnpYkpOSvDrJxdtsIgAAAAAAAAAAAACAGXNFz1W1e5I3J/mXJL+xTScCAAAAAAAAAAAAAJixYc7zfjnJoUmOHGPcVFXbcCQAAAAAAAAAAAAAgNusutNzVT0wyclJ/nCMceG8F66qE6rqI1X1kS996UtbMSIAAAAAAAAAAAAAsCtbMXquyZbOb0pydZKTtuTCY4xTxxiHjTEO22effbZiRAAAAAAAAAAAAABgV7Zhled/NsmRSZ48xvjadpgHAAAAAAAAAAAAAOB2Vouenzm9P3ey6fMdvHv6+P3HGJcvcC4AAAAAAAAAAAAAgCSrR8+nJblgicefmOTwJG9NcnmS6xY4EwAAAAAAAAAAAADArVaMnscYpy31eFXdM5Po+bQxxgULnwoAAAAAAAAAAAAAYGq39R4AAAAAAAAAAAAAAGAlomcAAAAAAAAAAAAAoLU1Rc9jjBPHGDXGuGDB8wAAAAAAAAAAAAAA3I6dngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAAAACA1kTPAAAAAAAAAAAAAEBromcAAAAAAAAAAAAAoDXRMwAAAAAAAAAAAADQmugZAAAAAAAAAAAAAGhN9AwAAAAAAAAAAAAAtCZ6BgAAAAAAAAAAAABaEz0DAAAAAAAAAAAAAK2JngEAAAAAAAAA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JEmSJEmSJElzzUXPkiRJkiRJkiRJkiRJkiRJkuaai54lSZIkSZIkSZIkSZIkSZIkzTUXPUuSJEmSJEmSJEmSJEmSJEmaay56liRJkiRJkiRJkiRJkiRJkjTXXPQsSZIkSZIkSZIkSZIkSZIkaa656FmSJEmSJEmSJEmSJEmSJEnSXHPRsyRJkiRJkiRJkiRJkiRJkqS55qJnSZIkSZIkSZIkSZIkSZIkSXPNRc+SJEmSJEmSJEmSJEmSJEmS5pqLniVJkiRJkiRJkiRJkiRJkiTNNRc9S5IkSZIkSZIkSZIkSZIkSZprLnqWJEmSJEmSJEmSJEmSJEmSNNdc9CxJkiRJkiRJkiRJkiRJkiRprrnoWZIkSZIkSZIkSZIkSZIkSdJcc9GzJEmSJEmSJEmSJEmSJEmSpLnmomdJkiRJkiRJkiRJkiRJkiRJc81Fz5IkSZIkSZIkSZIkSZIkSZLmmoueJUmSJEmSJEmSJEmSJEmSJM01Fz1LkiRJkiRJkiRJkiRJkiRJmmsuepYkSZIkSZIkSZIkSZIkSZI011z0LEmSJEmSJEmSJEmSJEmSJGmuuehZkiRJkiRJkiRJkiRJkiRJ0lxz0bMkSZIkSZIkSZIkSZIkSZKkueaiZ0mSJEmSJEmSJEmSJEmSJElzzUXPkiRJkiRJkiRJkiRJkiRJkuaai54lSZIkSZIkSZIkSZIkSZIkzTUXPUuSJEmSJEmSJEmSJEmSJEmaay56liRJkiRJkiRJkiRJkiRJkjTXXPQsSZIkSZIkSZIkSZIkSZIkaa656FmSJEmSJEmSJEmSJEmSJEnSXHPRsyRJkiRJkiRJkiRJkiRJkqS55qJnSZIkSZIkSZIkSZIkSZIkSXPNRc+SJEmSJEmSJEmSJEmSJEmS5pqLniVJkiRJkiRJkiRJkiRJkiTNNRc9S5IkSZIkSZIkSZIkSZIkSZprLnqWJEmSJEmSJEmSJEmSJEmSNNdc9CxJkiRJkiRJkiRJkiRJkiRprrnoWZIkSZIkSZIkSZIkSZIkSdJcc9GzJEmSJEmSJEmSJEmSJEmSpLnmomdJkiRJkiRJkiRJkiRJkiRJc23drBNwOT/5MPzqwNXFOOOh5d8Pv3blMW71KLjjU1aXDkmSJEmSJEmSJEmSJEmSJEmtmK9Fz786EM74FVz7VisO8emdv7i6NJzxq/Kvi54lSZIkSZIkSZIkSZIkSZKkuTBfi56hLHh+yldmd/wPP2h2x5YkSZIkSZIkSZIkSZIkSZK0iS1mnQBJkiRJkiRJkiRJkiRJkiRJGsVFz5IkSZIkSZIkSZIkSZIkSZLmmoueJUmSJEmSJEmSJEmSJEmSJM01Fz1LkiRJkiRJkiRJkiRJkiRJmmsuepYkSZIkSZIkSZIkSZIkSZI011z0LEmSJEmSJEmSJEmSJEmSJGmuuehZkiRJkiRJkiRJkiRJkiRJ0lxz0bMkSZIkSZIkSZIkSZIkSZKkueaiZ0mSJEmSJEmSJEmSJEmSJElzzUXPkiRJkiRJkiRJkiRJkiRJkuaai54lSZIkSZIkSZIkSZIkSZIkzTUXPUuSJEmSJEmSJEmSJEmSJEmaay56liRJkiRJkiRJkiRJkiRJkjTXXPQsSZIkSZIkSZIkSZIkSZIkaa656FmSJEmSJEmSJEmSJEmSJEnSXHPRsyRJkiRJkiRJkiRJkiRJkqS55qJnSZIkSZIkSZIkSZIkSZIkSXPNRc+SJEmSJEmSJEmSJEmSJEmS5pqLniVJkiRJkiRJkiRJkiRJkiTNNRc9S5IkSZIkSZIkSZIkSZIkSZprLnqWJEmSJEmSJEmSJEmSJEmSNNdc9CxJkiRJkiRJkiRJkiRJkiRprrnoWZIkSZIkSZIkSZIkSZIkSdJcc9GzJEmSJEmSJEmSJEmSJEmSpLnmomdJkiRJkiRJkiRJkiRJkiRJc81Fz5IkSZIkSZIkSZIkSZIkSZLmmoueJUmSJEmSJEmSJEmSJEmSJM01Fz1LkiRJkiRJkiRJkiRJkiRJmmsuepYkSZIkSZIkSZIkSZIkSZI011z0LEmSJEmSJEmSJEmSJEmSJGmuuehZkiRJkiRJkiRJkiRJkiRJ0lxz0bMkSZIkSZIkSZIkSZIkSZKkueaiZ0mSJEmSJEmSJEmSJEmSJElzzUXPkiRJkiRJkiRJkiRJkiRJkuaai54lSZIkSZIkSZIkSZIkSZIkzTUXPUuSJEmSJEmSJEmSJEmSJEmaay56liRJkiRJkiRJkiRJkiRJkjTXXPQsSZIkSZIkSZIkSZIkSZIkaa656FmSJEmSJEmSJEmSJEmSJEnSXHPRsyRJkiRJkiRJkiRJkiRJkqS55qJnSZIkSZIkSZIkSZIkSZIkSXPNRc+SJEmSJEmSJEmSJEmSJEmS5pqLniVJkiRJ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\n",
      "text/plain": [
       "<Figure size 2880x1440 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Only showing hierarchical cluster\n",
    "\n",
    "feature_names = X_train.columns\n",
    "\n",
    "fig, ax1 = plt.subplots(figsize=(40, 20))\n",
    "corr = spearmanr(X_train).correlation\n",
    "corr_linkage = hierarchy.ward(corr)\n",
    "dendro = hierarchy.dendrogram(\n",
    "    corr_linkage, labels=feature_names.tolist(), ax=ax1, leaf_rotation=90\n",
    ")\n",
    "dendro_idx = np.arange(0, len(dendro['ivl']))\n",
    "\n",
    "ax2.imshow(corr[dendro['leaves'], :][:, dendro['leaves']])\n",
    "ax2.set_xticks(dendro_idx)\n",
    "ax2.set_yticks(dendro_idx)\n",
    "ax2.set_xticklabels(dendro['ivl'], rotation='vertical')\n",
    "ax2.set_yticklabels(dendro['ivl'])\n",
    "ax1.set_title(\"Hierarchical cluster\", fontsize=30)\n",
    "fig.tight_layout()\n",
    "\n",
    "for label in (ax1.get_xticklabels() + ax1.get_yticklabels()):\n",
    "    label.set_fontname('Arial')\n",
    "    label.set_fontsize(20)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lipinksi and nrAtoms upshow a high collinearity. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Feature selection"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us make a data set without using Lipinski."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Dimensionality reduction - PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.decomposition import PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = X_train.copy().drop(columns=['ID'], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test = X_test.copy().drop(columns=['ID'], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "pca = PCA()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PCA(copy=True, iterated_power='auto', n_components=None, random_state=None,\n",
       "    svd_solver='auto', tol=0.0, whiten=False)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca.fit(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "explVarData = np.cumsum(pca.explained_variance_, dtype=float)/(np.cumsum(pca.explained_variance_, dtype=float)[len(pca.explained_variance_)-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "PCAExplVar = pd.DataFrame(data=explVarData, columns = ['Explained Variance'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Explained Variance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.996218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.997040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.997120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.997193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.997264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>123</th>\n",
       "      <td>0.999992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124</th>\n",
       "      <td>0.999996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125</th>\n",
       "      <td>0.999999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>126</th>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>127</th>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>128 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Explained Variance\n",
       "0              0.996218\n",
       "1              0.997040\n",
       "2              0.997120\n",
       "3              0.997193\n",
       "4              0.997264\n",
       "..                  ...\n",
       "123            0.999992\n",
       "124            0.999996\n",
       "125            0.999999\n",
       "126            1.000000\n",
       "127            1.000000\n",
       "\n",
       "[128 rows x 1 columns]"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "PCAExplVar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = sns.lineplot(data=PCAExplVar)\n",
    "ax.set(xlabel='PCA dimensions', ylabel='Explained Variance')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Almost all variance is explained by the first PCA."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "pca = PCA(n_components=2)\n",
    "pca.fit(X_train)\n",
    "X_train_pca = pca.transform(X_train)\n",
    "X_test_pca = pca.transform(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Different data sets to try out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "#X_train = X_train.copy().drop(columns=['ID'], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "#X_test = X_test.copy().drop(columns=['ID'], axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data set 1 - all features and minmax scaling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_d1 = X_train_minmax\n",
    "X_test_d1 = X_test_minmax"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data set 2 - all features and zscore scaling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_d2 = X_train_zscore\n",
    "X_test_d2 = X_test_zscore"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data set 3 - all features except 'Lipinski'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_d3 = X_train.copy().drop(columns=['Lipinski'], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test_d3 = X_test.copy().drop(columns=['Lipinski'], axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data set 4 - only features ['nrAtoms', 'ExactMolWT', 'Fragments']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_d4 = X_train.copy()[['nrAtoms', 'ExactMolWT', 'Fragments']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test_d4 = X_test.copy()[['nrAtoms', 'ExactMolWT', 'Fragments']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data set 5 - only features ['nrAtoms', 'ExactMolWT', 'Fragments', 'Lipinski']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_d5 = X_train.copy()[['nrAtoms', 'ExactMolWT', 'Fragments', 'Lipinski']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test_d5 = X_test.copy()[['nrAtoms', 'ExactMolWT', 'Fragments', 'Lipinski']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data set 6 - only fingerprint binaries "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_d6 = X_train.copy().drop(columns=['nrAtoms', 'ExactMolWT', 'Fragments', 'Lipinski'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test_d6 = X_test.copy().drop(columns=['nrAtoms', 'ExactMolWT', 'Fragments', 'Lipinski'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data set 7 - PCA dimensionality reduction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_d7 = X_train_pca"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test_d7 = X_test_pca"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model building "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Different models to try out\n",
    "clf1 = LogisticRegression(random_state=1, multi_class='auto')\n",
    "clf2 = RandomForestClassifier()\n",
    "clf3 = GaussianNB()\n",
    "clf4 = AdaBoostClassifier(DecisionTreeClassifier())\n",
    "clf5 = MLPClassifier(random_state=1, max_iter=100)\n",
    "clf6 = GradientBoostingClassifier()\n",
    "clf7 = LinearDiscriminantAnalysis()\n",
    "eclf = VotingClassifier(\n",
    "    estimators=[('rf', clf2), ('ada', clf4), ('gb', clf6)],\n",
    "    voting='hard')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import f1_score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data set 1 - all features and minmax scaling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.9010 [Logistic Regression]\n",
      "[21872  2403     0     0]\n",
      "AUC: 0.4467\n",
      "Brier score: 0.9010\n",
      "F1 score: 0.0000\n",
      "Precision score: 0.0000\n",
      "Recall score: 0.0000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/petrus/opt/anaconda3/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.7029 [Random Forest]\n",
      "[15610   824  6262  1579]\n",
      "AUC: 0.2855\n",
      "Brier score: 0.7081\n",
      "F1 score: 0.3083\n",
      "Precision score: 0.6571\n",
      "Recall score: 0.2014\n",
      "Accuracy: 0.8726 [naive Bayes]\n",
      "[20891  2112   981   291]\n",
      "AUC: 0.4108\n",
      "Brier score: 0.8726\n",
      "F1 score: 0.1584\n",
      "Precision score: 0.1211\n",
      "Recall score: 0.2288\n",
      "Accuracy: 0.5674 [Boosted Trees]\n",
      "[12335   942  9537  1461]\n",
      "AUC: 0.3718\n",
      "Brier score: 0.5683\n",
      "F1 score: 0.2180\n",
      "Precision score: 0.6080\n",
      "Recall score: 0.1328\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/petrus/opt/anaconda3/lib/python3.8/site-packages/sklearn/neural_network/_multilayer_perceptron.py:568: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (100) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.8696 [Neural Network]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/petrus/opt/anaconda3/lib/python3.8/site-packages/sklearn/neural_network/_multilayer_perceptron.py:568: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (100) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[20914  2208   958   195]\n",
      "AUC: 0.4291\n",
      "Brier score: 0.8696\n",
      "F1 score: 0.1097\n",
      "Precision score: 0.0811\n",
      "Recall score: 0.1691\n",
      "Accuracy: 0.6399 [Gradient Boosting]\n",
      "[14028   897  7844  1506]\n",
      "AUC: 0.3287\n",
      "Brier score: 0.6399\n",
      "F1 score: 0.2563\n",
      "Precision score: 0.6267\n",
      "Recall score: 0.1611\n",
      "Accuracy: 0.6204 [Linear Discriminant Analysis]\n",
      "[13595   938  8277  1465]\n",
      "AUC: 0.3500\n",
      "Brier score: 0.6204\n",
      "F1 score: 0.2413\n",
      "Precision score: 0.6097\n",
      "Recall score: 0.1504\n",
      "Accuracy: 0.6800 [Ensemble]\n",
      "[14873   809  6999  1594]\n",
      "AUC: 0.2965\n",
      "Brier score: 0.6784\n",
      "F1 score: 0.2899\n",
      "Precision score: 0.6633\n",
      "Recall score: 0.1855\n"
     ]
    }
   ],
   "source": [
    "# model comparison\n",
    "for clf, label in zip([clf1, clf2, clf3, clf4, clf5, clf6, clf7, eclf], ['Logistic Regression', 'Random Forest', 'naive Bayes', 'Boosted Trees', 'Neural Network', 'Gradient Boosting', 'Linear Discriminant Analysis', 'Ensemble']):\n",
    "        model = clf.fit(X_train_d1, y_train)\n",
    "        score = clf.score(X_test_d1, y_test)\n",
    "        print(\"Accuracy: %0.4f [%s]\" % (score, label))\n",
    "        print(confusion_matrix(clf.fit(X_train_d1, y_train).predict(X_test_d1), y_test).ravel())\n",
    "        predictions = model.predict(X_test_d1)\n",
    "        print(\"AUC: {:.4f}\".format(auc(pd.DataFrame(predictions), y_test))) \n",
    "        print(\"Brier score: {:.4f}\".format(brier_score(pd.DataFrame(predictions), y_test)))\n",
    "        print(\"F1 score: {:.4f}\".format(f1_score(pd.DataFrame(predictions), y_test)))\n",
    "        print(\"Precision score: {:.4f}\".format(precision_score(pd.DataFrame(predictions), y_test)))\n",
    "        print(\"Recall score: {:.4f}\".format(recall_score(pd.DataFrame(predictions), y_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data set 2 - all features and zscore scaling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.9010 [Logistic Regression]\n",
      "[21872  2403     0     0]\n",
      "AUC: 0.4467\n",
      "Brier score: 0.9010\n",
      "F1 score: 0.0000\n",
      "Precision score: 0.0000\n",
      "Recall score: 0.0000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/petrus/opt/anaconda3/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.7039 [Random Forest]\n",
      "[15618   793  6254  1610]\n",
      "AUC: 0.2793\n",
      "Brier score: 0.7097\n",
      "F1 score: 0.3136\n",
      "Precision score: 0.6700\n",
      "Recall score: 0.2047\n",
      "Accuracy: 0.3825 [naive Bayes]\n",
      "[20891  2112   981   291]\n",
      "AUC: 0.4108\n",
      "Brier score: 0.8726\n",
      "F1 score: 0.1584\n",
      "Precision score: 0.1211\n",
      "Recall score: 0.2288\n",
      "Accuracy: 0.5646 [Boosted Trees]\n",
      "[12302   950  9570  1453]\n",
      "AUC: 0.3794\n",
      "Brier score: 0.5666\n",
      "F1 score: 0.2164\n",
      "Precision score: 0.6047\n",
      "Recall score: 0.1318\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/petrus/opt/anaconda3/lib/python3.8/site-packages/sklearn/neural_network/_multilayer_perceptron.py:568: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (100) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.1351 [Neural Network]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/petrus/opt/anaconda3/lib/python3.8/site-packages/sklearn/neural_network/_multilayer_perceptron.py:568: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (100) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[20914  2208   958   195]\n",
      "AUC: 0.4291\n",
      "Brier score: 0.8696\n",
      "F1 score: 0.1097\n",
      "Precision score: 0.0811\n",
      "Recall score: 0.1691\n",
      "Accuracy: 0.6399 [Gradient Boosting]\n",
      "[14028   897  7844  1506]\n",
      "AUC: 0.3287\n",
      "Brier score: 0.6399\n",
      "F1 score: 0.2563\n",
      "Precision score: 0.6267\n",
      "Recall score: 0.1611\n",
      "Accuracy: 0.6204 [Linear Discriminant Analysis]\n",
      "[13595   938  8277  1465]\n",
      "AUC: 0.3500\n",
      "Brier score: 0.6204\n",
      "F1 score: 0.2413\n",
      "Precision score: 0.6097\n",
      "Recall score: 0.1504\n",
      "Accuracy: 0.6781 [Ensemble]\n",
      "[14851   816  7021  1587]\n",
      "AUC: 0.2991\n",
      "Brier score: 0.6772\n",
      "F1 score: 0.2883\n",
      "Precision score: 0.6604\n",
      "Recall score: 0.1844\n"
     ]
    }
   ],
   "source": [
    "# model comparison\n",
    "for clf, label in zip([clf1, clf2, clf3, clf4, clf5, clf6, clf7, eclf], ['Logistic Regression', 'Random Forest', 'naive Bayes', 'Boosted Trees', 'Neural Network', 'Gradient Boosting', 'Linear Discriminant Analysis', 'Ensemble']):\n",
    "        model = clf.fit(X_train_d2, y_train)\n",
    "        score = clf.score(X_test_d2, y_test)\n",
    "        print(\"Accuracy: %0.4f [%s]\" % (score, label))\n",
    "        print(confusion_matrix(clf.fit(X_train_d1, y_train).predict(X_test_d1), y_test).ravel())\n",
    "        predictions = model.predict(X_test_d1)\n",
    "        print(\"AUC: {:.4f}\".format(auc(pd.DataFrame(predictions), y_test))) \n",
    "        print(\"Brier score: {:.4f}\".format(brier_score(pd.DataFrame(predictions), y_test)))\n",
    "        print(\"F1 score: {:.4f}\".format(f1_score(pd.DataFrame(predictions), y_test)))\n",
    "        print(\"Precision score: {:.4f}\".format(precision_score(pd.DataFrame(predictions), y_test)))\n",
    "        print(\"Recall score: {:.4f}\".format(recall_score(pd.DataFrame(predictions), y_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data set 3 - all features except 'Lipinski'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/petrus/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:938: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.6178 [Logistic Regression]\n",
      "[21872  2403     0     0]\n",
      "AUC: 0.4467\n",
      "Brier score: 0.9010\n",
      "F1 score: 0.0000\n",
      "Precision score: 0.0000\n",
      "Recall score: 0.0000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/petrus/opt/anaconda3/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.7146 [Random Forest]\n",
      "[15474   815  6398  1588]\n",
      "AUC: 0.2870\n",
      "Brier score: 0.7029\n",
      "F1 score: 0.3057\n",
      "Precision score: 0.6608\n",
      "Recall score: 0.1988\n",
      "Accuracy: 0.4243 [naive Bayes]\n",
      "[20891  2112   981   291]\n",
      "AUC: 0.4108\n",
      "Brier score: 0.8726\n",
      "F1 score: 0.1584\n",
      "Precision score: 0.1211\n",
      "Recall score: 0.2288\n",
      "Accuracy: 0.5897 [Boosted Trees]\n",
      "[12227   950  9645  1453]\n",
      "AUC: 0.3804\n",
      "Brier score: 0.5635\n",
      "F1 score: 0.2152\n",
      "Precision score: 0.6047\n",
      "Recall score: 0.1309\n",
      "Accuracy: 0.8221 [Neural Network]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/petrus/opt/anaconda3/lib/python3.8/site-packages/sklearn/neural_network/_multilayer_perceptron.py:568: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (100) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[20914  2208   958   195]\n",
      "AUC: 0.4291\n",
      "Brier score: 0.8696\n",
      "F1 score: 0.1097\n",
      "Precision score: 0.0811\n",
      "Recall score: 0.1691\n",
      "Accuracy: 0.6422 [Gradient Boosting]\n",
      "[14028   897  7844  1506]\n",
      "AUC: 0.3287\n",
      "Brier score: 0.6399\n",
      "F1 score: 0.2563\n",
      "Precision score: 0.6267\n",
      "Recall score: 0.1611\n",
      "Accuracy: 0.6209 [Linear Discriminant Analysis]\n",
      "[13595   938  8277  1465]\n",
      "AUC: 0.3500\n",
      "Brier score: 0.6204\n",
      "F1 score: 0.2413\n",
      "Precision score: 0.6097\n",
      "Recall score: 0.1504\n",
      "Accuracy: 0.6837 [Ensemble]\n",
      "[14901   841  6971  1562]\n",
      "AUC: 0.3018\n",
      "Brier score: 0.6782\n",
      "F1 score: 0.2857\n",
      "Precision score: 0.6500\n",
      "Recall score: 0.1831\n"
     ]
    }
   ],
   "source": [
    "# model comparison\n",
    "for clf, label in zip([clf1, clf2, clf3, clf4, clf5, clf6, clf7, eclf], ['Logistic Regression', 'Random Forest', 'naive Bayes', 'Boosted Trees', 'Neural Network', 'Gradient Boosting', 'Linear Discriminant Analysis', 'Ensemble']):\n",
    "        model = clf.fit(X_train_d3, y_train)\n",
    "        score = clf.score(X_test_d3, y_test)\n",
    "        print(\"Accuracy: %0.4f [%s]\" % (score, label))\n",
    "        print(confusion_matrix(clf.fit(X_train_d1, y_train).predict(X_test_d1), y_test).ravel())\n",
    "        predictions = model.predict(X_test_d1)\n",
    "        print(\"AUC: {:.4f}\".format(auc(pd.DataFrame(predictions), y_test))) \n",
    "        print(\"Brier score: {:.4f}\".format(brier_score(pd.DataFrame(predictions), y_test)))\n",
    "        print(\"F1 score: {:.4f}\".format(f1_score(pd.DataFrame(predictions), y_test)))\n",
    "        print(\"Precision score: {:.4f}\".format(precision_score(pd.DataFrame(predictions), y_test)))\n",
    "        print(\"Recall score: {:.4f}\".format(recall_score(pd.DataFrame(predictions), y_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data set 4 - only features ['nrAtoms', 'ExactMolWT', 'Fragments']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.5553 [Logistic Regression]\n",
      "[21872  2403     0     0]\n",
      "AUC: 0.4467\n",
      "Brier score: 0.9010\n",
      "F1 score: 0.0000\n",
      "Precision score: 0.0000\n",
      "Recall score: 0.0000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/petrus/opt/anaconda3/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.5348 [Random Forest]\n",
      "[15537   799  6335  1604]\n",
      "AUC: 0.2834\n",
      "Brier score: 0.7061\n",
      "F1 score: 0.3102\n",
      "Precision score: 0.6675\n",
      "Recall score: 0.2020\n",
      "Accuracy: 0.2326 [naive Bayes]\n",
      "[20891  2112   981   291]\n",
      "AUC: 0.4108\n",
      "Brier score: 0.8726\n",
      "F1 score: 0.1584\n",
      "Precision score: 0.1211\n",
      "Recall score: 0.2288\n",
      "Accuracy: 0.5221 [Boosted Trees]\n",
      "[12244   963  9628  1440]\n",
      "AUC: 0.3774\n",
      "Brier score: 0.5637\n",
      "F1 score: 0.2138\n",
      "Precision score: 0.5993\n",
      "Recall score: 0.1301\n",
      "Accuracy: 0.2863 [Neural Network]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/petrus/opt/anaconda3/lib/python3.8/site-packages/sklearn/neural_network/_multilayer_perceptron.py:568: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (100) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[20914  2208   958   195]\n",
      "AUC: 0.4291\n",
      "Brier score: 0.8696\n",
      "F1 score: 0.1097\n",
      "Precision score: 0.0811\n",
      "Recall score: 0.1691\n",
      "Accuracy: 0.4793 [Gradient Boosting]\n",
      "[14028   897  7844  1506]\n",
      "AUC: 0.3287\n",
      "Brier score: 0.6399\n",
      "F1 score: 0.2563\n",
      "Precision score: 0.6267\n",
      "Recall score: 0.1611\n",
      "Accuracy: 0.5487 [Linear Discriminant Analysis]\n",
      "[13595   938  8277  1465]\n",
      "AUC: 0.3500\n",
      "Brier score: 0.6204\n",
      "F1 score: 0.2413\n",
      "Precision score: 0.6097\n",
      "Recall score: 0.1504\n",
      "Accuracy: 0.5158 [Ensemble]\n",
      "[14879   827  6993  1576]\n",
      "AUC: 0.2993\n",
      "Brier score: 0.6779\n",
      "F1 score: 0.2873\n",
      "Precision score: 0.6558\n",
      "Recall score: 0.1839\n"
     ]
    }
   ],
   "source": [
    "# model comparison\n",
    "for clf, label in zip([clf1, clf2, clf3, clf4, clf5, clf6, clf7, eclf], ['Logistic Regression', 'Random Forest', 'naive Bayes', 'Boosted Trees', 'Neural Network', 'Gradient Boosting', 'Linear Discriminant Analysis', 'Ensemble']):\n",
    "        model = clf.fit(X_train_d4, y_train)\n",
    "        score = clf.score(X_test_d4, y_test)\n",
    "        print(\"Accuracy: %0.4f [%s]\" % (score, label))\n",
    "        print(confusion_matrix(clf.fit(X_train_d1, y_train).predict(X_test_d1), y_test).ravel())\n",
    "        predictions = model.predict(X_test_d1)\n",
    "        print(\"AUC: {:.4f}\".format(auc(pd.DataFrame(predictions), y_test))) \n",
    "        print(\"Brier score: {:.4f}\".format(brier_score(pd.DataFrame(predictions), y_test)))\n",
    "        print(\"F1 score: {:.4f}\".format(f1_score(pd.DataFrame(predictions), y_test)))\n",
    "        print(\"Precision score: {:.4f}\".format(precision_score(pd.DataFrame(predictions), y_test)))\n",
    "        print(\"Recall score: {:.4f}\".format(recall_score(pd.DataFrame(predictions), y_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data set 5 - only features ['nrAtoms', 'ExactMolWT', 'Fragments', 'Lipinski']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.5483 [Logistic Regression]\n",
      "[21872  2403     0     0]\n",
      "AUC: 0.4467\n",
      "Brier score: 0.9010\n",
      "F1 score: 0.0000\n",
      "Precision score: 0.0000\n",
      "Recall score: 0.0000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/petrus/opt/anaconda3/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.5290 [Random Forest]\n",
      "[15476   815  6396  1588]\n",
      "AUC: 0.2880\n",
      "Brier score: 0.7029\n",
      "F1 score: 0.3058\n",
      "Precision score: 0.6608\n",
      "Recall score: 0.1989\n",
      "Accuracy: 0.2682 [naive Bayes]\n",
      "[20891  2112   981   291]\n",
      "AUC: 0.4108\n",
      "Brier score: 0.8726\n",
      "F1 score: 0.1584\n",
      "Precision score: 0.1211\n",
      "Recall score: 0.2288\n",
      "Accuracy: 0.5263 [Boosted Trees]\n",
      "[12352   970  9520  1433]\n",
      "AUC: 0.3819\n",
      "Brier score: 0.5679\n",
      "F1 score: 0.2146\n",
      "Precision score: 0.5963\n",
      "Recall score: 0.1308\n",
      "Accuracy: 0.1308 [Neural Network]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/petrus/opt/anaconda3/lib/python3.8/site-packages/sklearn/neural_network/_multilayer_perceptron.py:568: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (100) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[20914  2208   958   195]\n",
      "AUC: 0.4291\n",
      "Brier score: 0.8696\n",
      "F1 score: 0.1097\n",
      "Precision score: 0.0811\n",
      "Recall score: 0.1691\n",
      "Accuracy: 0.4793 [Gradient Boosting]\n",
      "[14028   897  7844  1506]\n",
      "AUC: 0.3287\n",
      "Brier score: 0.6399\n",
      "F1 score: 0.2563\n",
      "Precision score: 0.6267\n",
      "Recall score: 0.1611\n",
      "Accuracy: 0.5487 [Linear Discriminant Analysis]\n",
      "[13595   938  8277  1465]\n",
      "AUC: 0.3500\n",
      "Brier score: 0.6204\n",
      "F1 score: 0.2413\n",
      "Precision score: 0.6097\n",
      "Recall score: 0.1504\n",
      "Accuracy: 0.5165 [Ensemble]\n",
      "[14856   798  7016  1605]\n",
      "AUC: 0.2952\n",
      "Brier score: 0.6781\n",
      "F1 score: 0.2912\n",
      "Precision score: 0.6679\n",
      "Recall score: 0.1862\n"
     ]
    }
   ],
   "source": [
    "# model comparison\n",
    "for clf, label in zip([clf1, clf2, clf3, clf4, clf5, clf6, clf7, eclf], ['Logistic Regression', 'Random Forest', 'naive Bayes', 'Boosted Trees', 'Neural Network', 'Gradient Boosting', 'Linear Discriminant Analysis', 'Ensemble']):\n",
    "        model = clf.fit(X_train_d5, y_train)\n",
    "        score = clf.score(X_test_d5, y_test)\n",
    "        print(\"Accuracy: %0.4f [%s]\" % (score, label))\n",
    "        print(confusion_matrix(clf.fit(X_train_d1, y_train).predict(X_test_d1), y_test).ravel())\n",
    "        predictions = model.predict(X_test_d1)\n",
    "        print(\"AUC: {:.4f}\".format(auc(pd.DataFrame(predictions), y_test))) \n",
    "        print(\"Brier score: {:.4f}\".format(brier_score(pd.DataFrame(predictions), y_test)))\n",
    "        print(\"F1 score: {:.4f}\".format(f1_score(pd.DataFrame(predictions), y_test)))\n",
    "        print(\"Precision score: {:.4f}\".format(precision_score(pd.DataFrame(predictions), y_test)))\n",
    "        print(\"Recall score: {:.4f}\".format(recall_score(pd.DataFrame(predictions), y_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data set 6 - only fingerprint binaries "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.6199 [Logistic Regression]\n",
      "[21872  2403     0     0]\n",
      "AUC: 0.4467\n",
      "Brier score: 0.9010\n",
      "F1 score: 0.0000\n",
      "Precision score: 0.0000\n",
      "Recall score: 0.0000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/petrus/opt/anaconda3/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.7287 [Random Forest]\n",
      "[15413   812  6459  1591]\n",
      "AUC: 0.2883\n",
      "Brier score: 0.7005\n",
      "F1 score: 0.3044\n",
      "Precision score: 0.6621\n",
      "Recall score: 0.1976\n",
      "Accuracy: 0.4991 [naive Bayes]\n",
      "[20891  2112   981   291]\n",
      "AUC: 0.4108\n",
      "Brier score: 0.8726\n",
      "F1 score: 0.1584\n",
      "Precision score: 0.1211\n",
      "Recall score: 0.2288\n",
      "Accuracy: 0.6428 [Boosted Trees]\n",
      "[12257   956  9615  1447]\n",
      "AUC: 0.3751\n",
      "Brier score: 0.5645\n",
      "F1 score: 0.2149\n",
      "Precision score: 0.6022\n",
      "Recall score: 0.1308\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/petrus/opt/anaconda3/lib/python3.8/site-packages/sklearn/neural_network/_multilayer_perceptron.py:568: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (100) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.6693 [Neural Network]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/petrus/opt/anaconda3/lib/python3.8/site-packages/sklearn/neural_network/_multilayer_perceptron.py:568: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (100) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[20914  2208   958   195]\n",
      "AUC: 0.4291\n",
      "Brier score: 0.8696\n",
      "F1 score: 0.1097\n",
      "Precision score: 0.0811\n",
      "Recall score: 0.1691\n",
      "Accuracy: 0.6667 [Gradient Boosting]\n",
      "[14027   897  7845  1506]\n",
      "AUC: 0.3287\n",
      "Brier score: 0.6399\n",
      "F1 score: 0.2563\n",
      "Precision score: 0.6267\n",
      "Recall score: 0.1611\n",
      "Accuracy: 0.6207 [Linear Discriminant Analysis]\n",
      "[13595   938  8277  1465]\n",
      "AUC: 0.3500\n",
      "Brier score: 0.6204\n",
      "F1 score: 0.2413\n",
      "Precision score: 0.6097\n",
      "Recall score: 0.1504\n",
      "Accuracy: 0.7110 [Ensemble]\n",
      "[14921   832  6951  1571]\n",
      "AUC: 0.3018\n",
      "Brier score: 0.6794\n",
      "F1 score: 0.2876\n",
      "Precision score: 0.6538\n",
      "Recall score: 0.1843\n"
     ]
    }
   ],
   "source": [
    "# model comparison\n",
    "for clf, label in zip([clf1, clf2, clf3, clf4, clf5, clf6, clf7, eclf], ['Logistic Regression', 'Random Forest', 'naive Bayes', 'Boosted Trees', 'Neural Network', 'Gradient Boosting', 'Linear Discriminant Analysis', 'Ensemble']):\n",
    "        model = clf.fit(X_train_d6, y_train)\n",
    "        score = clf.score(X_test_d6, y_test)\n",
    "        print(\"Accuracy: %0.4f [%s]\" % (score, label))\n",
    "        print(confusion_matrix(clf.fit(X_train_d1, y_train).predict(X_test_d1), y_test).ravel())\n",
    "        predictions = model.predict(X_test_d1)\n",
    "        print(\"AUC: {:.4f}\".format(auc(pd.DataFrame(predictions), y_test))) \n",
    "        print(\"Brier score: {:.4f}\".format(brier_score(pd.DataFrame(predictions), y_test)))\n",
    "        print(\"F1 score: {:.4f}\".format(f1_score(pd.DataFrame(predictions), y_test)))\n",
    "        print(\"Precision score: {:.4f}\".format(precision_score(pd.DataFrame(predictions), y_test)))\n",
    "        print(\"Recall score: {:.4f}\".format(recall_score(pd.DataFrame(predictions), y_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data set 7 - PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.5686 [Logistic Regression]\n",
      "[21872  2403     0     0]\n",
      "AUC: 0.4467\n",
      "Brier score: 0.9010\n",
      "F1 score: 0.0000\n",
      "Precision score: 0.0000\n",
      "Recall score: 0.0000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/petrus/opt/anaconda3/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.5412 [Random Forest]\n",
      "[15552   799  6320  1604]\n",
      "AUC: 0.2816\n",
      "Brier score: 0.7067\n",
      "F1 score: 0.3106\n",
      "Precision score: 0.6675\n",
      "Recall score: 0.2024\n",
      "Accuracy: 0.6394 [naive Bayes]\n",
      "[20891  2112   981   291]\n",
      "AUC: 0.4108\n",
      "Brier score: 0.8726\n",
      "F1 score: 0.1584\n",
      "Precision score: 0.1211\n",
      "Recall score: 0.2288\n",
      "Accuracy: 0.5125 [Boosted Trees]\n",
      "[12200   957  9672  1446]\n",
      "AUC: 0.3762\n",
      "Brier score: 0.5621\n",
      "F1 score: 0.2139\n",
      "Precision score: 0.6017\n",
      "Recall score: 0.1301\n",
      "Accuracy: 0.6283 [Neural Network]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/petrus/opt/anaconda3/lib/python3.8/site-packages/sklearn/neural_network/_multilayer_perceptron.py:568: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (100) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[20914  2208   958   195]\n",
      "AUC: 0.4291\n",
      "Brier score: 0.8696\n",
      "F1 score: 0.1097\n",
      "Precision score: 0.0811\n",
      "Recall score: 0.1691\n",
      "Accuracy: 0.5144 [Gradient Boosting]\n",
      "[14028   897  7844  1506]\n",
      "AUC: 0.3287\n",
      "Brier score: 0.6399\n",
      "F1 score: 0.2563\n",
      "Precision score: 0.6267\n",
      "Recall score: 0.1611\n",
      "Accuracy: 0.5684 [Linear Discriminant Analysis]\n",
      "[13595   938  8277  1465]\n",
      "AUC: 0.3500\n",
      "Brier score: 0.6204\n",
      "F1 score: 0.2413\n",
      "Precision score: 0.6097\n",
      "Recall score: 0.1504\n",
      "Accuracy: 0.5222 [Ensemble]\n",
      "[14874   835  6998  1568]\n",
      "AUC: 0.3034\n",
      "Brier score: 0.6773\n",
      "F1 score: 0.2859\n",
      "Precision score: 0.6525\n",
      "Recall score: 0.1830\n"
     ]
    }
   ],
   "source": [
    "# model comparison\n",
    "for clf, label in zip([clf1, clf2, clf3, clf4, clf5, clf6, clf7, eclf], ['Logistic Regression', 'Random Forest', 'naive Bayes', 'Boosted Trees', 'Neural Network', 'Gradient Boosting', 'Linear Discriminant Analysis', 'Ensemble']):\n",
    "        model = clf.fit(X_train_d7, y_train)\n",
    "        score = clf.score(X_test_d7, y_test)\n",
    "        print(\"Accuracy: %0.4f [%s]\" % (score, label))\n",
    "        print(confusion_matrix(clf.fit(X_train_d1, y_train).predict(X_test_d1), y_test).ravel())\n",
    "        predictions = model.predict(X_test_d1)\n",
    "        print(\"AUC: {:.4f}\".format(auc(pd.DataFrame(predictions), y_test))) \n",
    "        print(\"Brier score: {:.4f}\".format(brier_score(pd.DataFrame(predictions), y_test)))\n",
    "        print(\"F1 score: {:.4f}\".format(f1_score(pd.DataFrame(predictions), y_test)))\n",
    "        print(\"Precision score: {:.4f}\".format(precision_score(pd.DataFrame(predictions), y_test)))\n",
    "        print(\"Recall score: {:.4f}\".format(recall_score(pd.DataFrame(predictions), y_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Auto-sklearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "import autosklearn.classification\n",
    "import sklearn.metrics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data set 1 - all features and minmax scaling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/petrus/opt/anaconda3/lib/python3.8/site-packages/distributed/node.py:151: UserWarning: Port 8787 is already in use.\n",
      "Perhaps you already have a cluster running?\n",
      "Hosting the HTTP server on port 56113 instead\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ERROR] [2020-12-08 18:18:42,824:AutoMLSMBO(1)::4f2977d818f7f4494f1dfe016939a9b5] Error getting metafeatures: Can't pickle local object 'Client.__init__.<locals>.<lambda>'\n",
      "[ERROR] [2020-12-08 18:18:42,838:AutoMLSMBO(1)::4f2977d818f7f4494f1dfe016939a9b5] Error getting metafeatures (encoded) : Can't pickle local object 'Client.__init__.<locals>.<lambda>'\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "not enough arguments for format string",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-82-4d711078d172>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mautoml\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train_d1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0my_hat\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mautoml\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test_d1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Accuracy: %0.4f [%s]\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetrics\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maccuracy_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_hat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m: not enough arguments for format string"
     ]
    }
   ],
   "source": [
    "automl = autosklearn.classification.AutoSklearnClassifier()\n",
    "automl.fit(X_train_d1, y_train)\n",
    "y_hat = automl.predict(X_test_d1)\n",
    "print(\"Accuracy: %0.4f [%s]\" % sklearn.metrics.accuracy_score(y_test, y_hat))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(0.74, SimpleClassificationPipeline({'balancing:strategy': 'none', 'classifier:__choice__': 'lda', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'no_coalescense', 'data_preprocessing:numerical_transformer:imputation:strategy': 'median', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'normalize', 'feature_preprocessor:__choice__': 'pca', 'classifier:lda:n_components': 230, 'classifier:lda:shrinkage': 'None', 'classifier:lda:tol': 0.004697509790516932, 'feature_preprocessor:pca:keep_variance': 0.9805398508640487, 'feature_preprocessor:pca:whiten': 'True'},\n",
      "dataset_properties={\n",
      "  'task': 1,\n",
      "  'sparse': False,\n",
      "  'multilabel': False,\n",
      "  'multiclass': False,\n",
      "  'target_type': 'classification',\n",
      "  'signed': False})), (0.1, SimpleClassificationPipeline({'balancing:strategy': 'none', 'classifier:__choice__': 'random_forest', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'standardize', 'feature_preprocessor:__choice__': 'no_preprocessing', 'classifier:random_forest:bootstrap': 'True', 'classifier:random_forest:criterion': 'gini', 'classifier:random_forest:max_depth': 'None', 'classifier:random_forest:max_features': 0.5, 'classifier:random_forest:max_leaf_nodes': 'None', 'classifier:random_forest:min_impurity_decrease': 0.0, 'classifier:random_forest:min_samples_leaf': 1, 'classifier:random_forest:min_samples_split': 2, 'classifier:random_forest:min_weight_fraction_leaf': 0.0, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.01},\n",
      "dataset_properties={\n",
      "  'task': 1,\n",
      "  'sparse': False,\n",
      "  'multilabel': False,\n",
      "  'multiclass': False,\n",
      "  'target_type': 'classification',\n",
      "  'signed': False})), (0.06, SimpleClassificationPipeline({'balancing:strategy': 'weighting', 'classifier:__choice__': 'random_forest', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'no_coalescense', 'data_preprocessing:numerical_transformer:imputation:strategy': 'most_frequent', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'none', 'feature_preprocessor:__choice__': 'fast_ica', 'classifier:random_forest:bootstrap': 'False', 'classifier:random_forest:criterion': 'gini', 'classifier:random_forest:max_depth': 'None', 'classifier:random_forest:max_features': 0.34532075016729213, 'classifier:random_forest:max_leaf_nodes': 'None', 'classifier:random_forest:min_impurity_decrease': 0.0, 'classifier:random_forest:min_samples_leaf': 7, 'classifier:random_forest:min_samples_split': 5, 'classifier:random_forest:min_weight_fraction_leaf': 0.0, 'feature_preprocessor:fast_ica:algorithm': 'parallel', 'feature_preprocessor:fast_ica:fun': 'exp', 'feature_preprocessor:fast_ica:whiten': 'True', 'feature_preprocessor:fast_ica:n_components': 694},\n",
      "dataset_properties={\n",
      "  'task': 1,\n",
      "  'sparse': False,\n",
      "  'multilabel': False,\n",
      "  'multiclass': False,\n",
      "  'target_type': 'classification',\n",
      "  'signed': False})), (0.04, SimpleClassificationPipeline({'balancing:strategy': 'none', 'classifier:__choice__': 'qda', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'most_frequent', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'none', 'feature_preprocessor:__choice__': 'no_preprocessing', 'classifier:qda:reg_param': 0.563056219822946, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.32793677336996485},\n",
      "dataset_properties={\n",
      "  'task': 1,\n",
      "  'sparse': False,\n",
      "  'multilabel': False,\n",
      "  'multiclass': False,\n",
      "  'target_type': 'classification',\n",
      "  'signed': False})), (0.02, SimpleClassificationPipeline({'balancing:strategy': 'weighting', 'classifier:__choice__': 'random_forest', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'standardize', 'feature_preprocessor:__choice__': 'fast_ica', 'classifier:random_forest:bootstrap': 'False', 'classifier:random_forest:criterion': 'gini', 'classifier:random_forest:max_depth': 'None', 'classifier:random_forest:max_features': 0.5060547288077855, 'classifier:random_forest:max_leaf_nodes': 'None', 'classifier:random_forest:min_impurity_decrease': 0.0, 'classifier:random_forest:min_samples_leaf': 1, 'classifier:random_forest:min_samples_split': 2, 'classifier:random_forest:min_weight_fraction_leaf': 0.0, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.0035910958871423057, 'feature_preprocessor:fast_ica:algorithm': 'parallel', 'feature_preprocessor:fast_ica:fun': 'exp', 'feature_preprocessor:fast_ica:whiten': 'True', 'feature_preprocessor:fast_ica:n_components': 112},\n",
      "dataset_properties={\n",
      "  'task': 1,\n",
      "  'sparse': False,\n",
      "  'multilabel': False,\n",
      "  'multiclass': False,\n",
      "  'target_type': 'classification',\n",
      "  'signed': False})), (0.02, SimpleClassificationPipeline({'balancing:strategy': 'none', 'classifier:__choice__': 'random_forest', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'median', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'standardize', 'feature_preprocessor:__choice__': 'fast_ica', 'classifier:random_forest:bootstrap': 'True', 'classifier:random_forest:criterion': 'gini', 'classifier:random_forest:max_depth': 'None', 'classifier:random_forest:max_features': 0.48518612167085107, 'classifier:random_forest:max_leaf_nodes': 'None', 'classifier:random_forest:min_impurity_decrease': 0.0, 'classifier:random_forest:min_samples_leaf': 13, 'classifier:random_forest:min_samples_split': 5, 'classifier:random_forest:min_weight_fraction_leaf': 0.0, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.012533243726774322, 'feature_preprocessor:fast_ica:algorithm': 'deflation', 'feature_preprocessor:fast_ica:fun': 'logcosh', 'feature_preprocessor:fast_ica:whiten': 'True', 'feature_preprocessor:fast_ica:n_components': 100},\n",
      "dataset_properties={\n",
      "  'task': 1,\n",
      "  'sparse': False,\n",
      "  'multilabel': False,\n",
      "  'multiclass': False,\n",
      "  'target_type': 'classification',\n",
      "  'signed': False})), (0.02, SimpleClassificationPipeline({'balancing:strategy': 'none', 'classifier:__choice__': 'gaussian_nb', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'most_frequent', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'robust_scaler', 'feature_preprocessor:__choice__': 'select_rates_classification', 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.036421830792176535, 'data_preprocessing:numerical_transformer:rescaling:robust_scaler:q_max': 0.8426416654897311, 'data_preprocessing:numerical_transformer:rescaling:robust_scaler:q_min': 0.1334470003345883, 'feature_preprocessor:select_rates_classification:alpha': 0.4433049256683368, 'feature_preprocessor:select_rates_classification:score_func': 'mutual_info_classif'},\n",
      "dataset_properties={\n",
      "  'task': 1,\n",
      "  'sparse': False,\n",
      "  'multilabel': False,\n",
      "  'multiclass': False,\n",
      "  'target_type': 'classification',\n",
      "  'signed': False}))]\n"
     ]
    }
   ],
   "source": [
    "print(automl.get_models_with_weights())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data set 2 - all features and zscore scaling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "automl = autosklearn.classification.AutoSklearnClassifier()\n",
    "automl.fit(X_train_d2, y_train)\n",
    "y_hat = automl.predict(X_test_d2)\n",
    "print(\"Accuracy: %0.4f [%s]\" % sklearn.metrics.accuracy_score(y_test, y_hat))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(automl.get_models_with_weights())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data set 3 - all features except 'Lipinski'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "automl = autosklearn.classification.AutoSklearnClassifier()\n",
    "automl.fit(X_train_d3, y_train)\n",
    "y_hat = automl.predict(X_test_d3)\n",
    "print(\"Accuracy: %0.4f [%s]\" % sklearn.metrics.accuracy_score(y_test, y_hat))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(automl.get_models_with_weights())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(automl.show_models())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "automl.cv_results_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "automl.sprint_statistics()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data set 4 - only features ['nrAtoms', 'ExactMolWT', 'Fragments']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "automl = autosklearn.classification.AutoSklearnClassifier()\n",
    "automl.fit(X_train_d4, y_train)\n",
    "y_hat = automl.predict(X_test_d4)\n",
    "print(\"Accuracy: %0.4f [%s]\" % sklearn.metrics.accuracy_score(y_test, y_hat))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(automl.get_models_with_weights())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data set 5 - only fingerprint binaries "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "automl = autosklearn.classification.AutoSklearnClassifier()\n",
    "automl.fit(X_train_d5, y_train)\n",
    "y_hat = automl.predict(X_test_d5)\n",
    "print(\"Accuracy: %0.4f [%s]\" % sklearn.metrics.accuracy_score(y_test, y_hat))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(automl.get_models_with_weights())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data set 6 - only fingerprint binaries "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "automl = autosklearn.classification.AutoSklearnClassifier()\n",
    "automl.fit(X_train_d6, y_train)\n",
    "y_hat = automl.predict(X_test_d6)\n",
    "print(\"Accuracy: %0.4f [%s]\" % sklearn.metrics.accuracy_score(y_test, y_hat))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(automl.get_models_with_weights())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data set 7 - PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "automl = autosklearn.classification.AutoSklearnClassifier()\n",
    "automl.fit(X_train_d7, y_train)\n",
    "y_hat = automl.predict(X_test_d7)\n",
    "print(\"Accuracy: %0.4f [%s]\" % sklearn.metrics.accuracy_score(y_test, y_hat))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(automl.get_models_with_weights())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Parameter setting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
